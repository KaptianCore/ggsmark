"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = plugin;

var _spaceSeparatedTokens = _interopRequireDefault(require("space-separated-tokens"));

require("core-js");

var C_NEWLINE = '\n';
var C_NEWPARAGRAPH = '\n\n';

function plugin() {
  var _options$useClassName;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var locateMarker = new RegExp("[^\\\\]?(->|<-)");
  var endMarkers = ['->', '<-'];
  options.classNames = {};
  options.useClassNames = (_options$useClassName = options.useClassNames) !== null && _options$useClassName !== void 0 ? _options$useClassName : false;

  function alignTokenizer(eat, value, silent) {
    var keep = value.match(locateMarker);
    if (!keep || keep.index !== 0) return;
    var now = eat.now();
    var [, startMarker] = keep;
    /* istanbul ignore if - never used (yet) */

    if (silent) return true;
    var index = 0;
    var linesToEat = [];
    var finishedBlocks = [];
    var endMarker = '';
    var canEatLine = true;
    var blockStartIndex = 0;

    while (canEatLine) {
      var nextIndex = value.indexOf(C_NEWLINE, index + 1);
      var lineToEat = nextIndex !== -1 ? value.slice(index, nextIndex) : value.slice(index);
      linesToEat.push(lineToEat);
      var endIndex = endMarkers.indexOf(lineToEat.slice(-2)); // If nextIndex = (blockStartIndex + 2), it's the first marker of the block.

      if ((nextIndex > blockStartIndex + 2 || nextIndex === -1) && lineToEat.length >= 2 && endIndex !== -1) {
        if (endMarker === '') endMarker = lineToEat.slice(-2);
        finishedBlocks.push(linesToEat.join(C_NEWLINE)); // Check if another block is following

        if (value.indexOf('->', nextIndex) !== nextIndex + 1) break;
        linesToEat = [];
        blockStartIndex = nextIndex + 1;
      }

      index = nextIndex + 1;
      canEatLine = nextIndex !== -1;
    }

    var elementType = '';
    var classes, style;

    if (startMarker === '<-' && endMarker === '<-') {
      elementType = 'leftAligned';

      if (options.useClassNames) {
        classes = options.classNames.left ? _spaceSeparatedTokens.default.parse(options.classNames.left) : 'align-left';
      } else {
        style = 'text-align: left';
      }
    }

    if (startMarker === '->') {
      if (endMarker === '<-') {
        elementType = 'centerAligned';

        if (options.useClassNames) {
          classes = options.classNames.center ? _spaceSeparatedTokens.default.parse(options.classNames.center) : 'align-center';
        } else {
          style = 'text-align: center';
        }
      }

      if (endMarker === '->') {
        elementType = 'rightAligned';

        if (options.useClassNames) {
          classes = options.classNames.right ? _spaceSeparatedTokens.default.parse(options.classNames.right) : 'align-right';
        } else {
          style = 'text-align: right';
        }
      }
    }

    if (!elementType) return;
    if (finishedBlocks.length === 0) return;
    var stringToEat = '';
    var marker = finishedBlocks[0].substring(finishedBlocks[0].length - 2, finishedBlocks[0].length);
    var toEat = [];

    for (var i = 0; i < finishedBlocks.length; ++i) {
      var block = finishedBlocks[i];
      if (marker !== block.substring(block.length - 2, block.length)) break;
      toEat.push(block);
      stringToEat += block.slice(2, -2) + C_NEWPARAGRAPH;
    }

    var add = eat(toEat.join(C_NEWLINE));
    var exit = this.enterBlock();
    var values = this.tokenizeBlock(stringToEat, now);
    exit();
    return add({
      type: elementType,
      children: values,
      data: {
        hName: 'div',
        hProperties: {
          class: classes,
          style
        }
      }
    });
  }

  var Parser = this.Parser; // Inject blockTokenizer

  var blockTokenizers = Parser.prototype.blockTokenizers;
  var blockMethods = Parser.prototype.blockMethods;
  blockTokenizers.alignBlocks = alignTokenizer;
  blockMethods.splice(blockMethods.indexOf('list') + 1, 0, 'alignBlocks');
  var Compiler = this.Compiler; // Stringify

  if (Compiler) {
    var visitors = Compiler.prototype.visitors;
    if (!visitors) return;

    var alignCompiler = function alignCompiler(node) {
      var innerContent = this.all(node);
      var markers = {
        left: ['<-', '<-'],
        right: ['->', '->'],
        center: ['->', '<-']
      };
      var alignType = node.type.slice(0, -7);
      if (!markers[alignType]) return innerContent.join('\n\n');
      var [start, end] = markers[alignType];
      if (innerContent.length < 2) return "".concat(start, " ").concat(innerContent.join('\n').trim(), " ").concat(end);
      return "".concat(start, "\n").concat(innerContent.join('\n\n').trim(), "\n").concat(end);
    };

    visitors.leftAligned = alignCompiler;
    visitors.rightAligned = alignCompiler;
    visitors.centerAligned = alignCompiler;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,