"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = plugin;

require("core-js");

var C_NEWLINE = '\n';
var C_NEWPARAGRAPH = '\n\n';
/**
 * Match line against an array of token
 * @param {String} token token like '!#'
 * @param {String} value value to check of the token
 */

function matchToken(token, value) {
  return value.trim().startsWith(token);
}
/**
 * Get the color of a block
 * @param {String} token token like '!#'
 * @param {String} colorExpression regular expression to match, it must capture the first group
 * @param {String} block final string block to be parsed
 */


function getBlockColor(token, colorExpression, block) {
  var trimmedBlock = block.trim();

  if (trimmedBlock.startsWith(token)) {
    return trimmedBlock.slice(token.length).match(colorExpression)[1];
  }
}

function plugin() {
  var _options$token, _options$colorExpress;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var Parser = this.Parser;
  var blockTokenizers = Parser.prototype.blockTokenizers;
  var blockMethods = Parser.prototype.blockMethods;
  var inlineTokenizers = Parser.prototype.inlineTokenizers;
  var inlineMethods = Parser.prototype.inlineMethods;
  options.token = (_options$token = options.token) !== null && _options$token !== void 0 ? _options$token : '!#';
  options.colorExpression = (_options$colorExpress = options.colorExpression) !== null && _options$colorExpress !== void 0 ? _options$colorExpress : /^\s*(rgba?\(\d{1,3}\s*\,\s*\d{1,3}\s*\,\s*\d{1,3}\s*(\,\s*\d{1,3}\s*)?\)|(\#?[A-z0-9]{3,12}))?/;

  function tokenizeBlocks(eat, value, silent) {
    var match = matchToken(options.token, value);
    if (!match) return;
    if (silent) return true;
    var startBlock,
        endBlock = 0;
    var index,
        newLine = 0;
    var completeBlock = false;
    var firstRun = true;

    do {
      newLine = value.indexOf(C_NEWLINE, index + 1);
      var line = value.substring(index, newLine === -1 ? value.length : newLine);
      var matchedEndToken = matchToken(options.token, line) && !firstRun; // Found a match to end the block

      if (!!matchedEndToken) {
        endBlock = newLine === -1 ? value.length : newLine;
        completeBlock = true;
      }

      index = newLine;
      firstRun = false;
    } while (!completeBlock && newLine !== -1);

    if (!completeBlock) return;
    var block = value.substring(startBlock, endBlock);
    var blockContent = block.substring(block.indexOf(C_NEWLINE), block.lastIndexOf(C_NEWLINE)).trim();
    var color = getBlockColor(options.token, options.colorExpression, block);
    var start = eat.now();
    var add = eat(block);
    var end = eat.now();
    var children = this.tokenizeBlock(blockContent, start);
    return add({
      type: 'colorText',
      children: children,
      data: {
        hName: 'div',
        hProperties: {
          style: "color: ".concat(color)
        }
      },
      position: {
        start,
        end
      }
    });
  }

  function locateInlineToken(value, fromIndex) {
    return value.indexOf(options.token, fromIndex);
  }

  function tokenizeInlines(eat, value, silent) {
    var match = matchToken(options.token, value);
    if (!match) return;
    if (silent) return true;
    var color = getBlockColor(options.token, options.colorExpression, value);
    var openBracket = value.indexOf('(') + 1;
    var closeBracket = value.indexOf(')');
    var inline = value.substring(0, closeBracket + 1);
    var inlineContent = value.substring(openBracket, closeBracket);
    if (openBracket === -1 || closeBracket === -1) return;
    var start = eat.now();
    var add = eat(inline);
    var end = eat.now();
    var children = this.tokenizeInline(inlineContent, start);
    return add({
      type: 'colorText',
      children: children,
      data: {
        hName: 'span',
        hProperties: {
          style: "color: ".concat(color)
        }
      },
      position: {
        start,
        end
      }
    });
  }

  tokenizeInlines.notInLink = true;
  tokenizeInlines.locator = locateInlineToken;
  blockTokenizers.colorText = tokenizeBlocks;
  inlineTokenizers.colorText = tokenizeInlines;
  blockMethods.splice(blockMethods.indexOf('blockquote') + 1, 0, 'colorText');
  inlineMethods.splice(inlineMethods.indexOf('escape') + 1, 0, 'colorText');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,