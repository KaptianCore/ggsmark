"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = plugin;

require("core-js");

var C_NEWLINE = '\n';
var C_NEWPARAGRAPH = '\n\n';
/**
 * Match line against an array of token
 * @param {String} token token like '!#'
 * @param {String} value value to check of the token
 */

function matchToken(token, value) {
  return value.trim().startsWith(token);
}

function plugin() {
  var _options$defaultSumma, _options$token, _options$detailsClass, _options$summaryClass;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var Parser = this.Parser;
  var blockTokenizers = Parser.prototype.blockTokenizers;
  var blockMethods = Parser.prototype.blockMethods;
  var inlineTokenizers = Parser.prototype.inlineTokenizers;
  var inlineMethods = Parser.prototype.inlineMethods;
  options.defaultSummary = (_options$defaultSumma = options.defaultSummary) !== null && _options$defaultSumma !== void 0 ? _options$defaultSumma : 'Open spoiler';
  options.token = (_options$token = options.token) !== null && _options$token !== void 0 ? _options$token : '!spoiler';
  options.detailsClassName = (_options$detailsClass = options.detailsClassName) !== null && _options$detailsClass !== void 0 ? _options$detailsClass : '';
  options.summaryClassName = (_options$summaryClass = options.summaryClassName) !== null && _options$summaryClass !== void 0 ? _options$summaryClass : '';

  function tokenizeBlocks(eat, value, silent) {
    var match = matchToken(options.token, value);
    if (!match) return;
    if (silent) return true;
    var startBlock,
        endBlock = 0;
    var index,
        newLine = 0;
    var completeBlock = false;
    var firstRun = true;

    do {
      newLine = value.indexOf(C_NEWLINE, index + 1);
      var line = value.substring(index, newLine === -1 ? value.length : newLine);
      var matchedEndToken = matchToken(options.token, line) && !firstRun; // Found a match to end the block

      if (!!matchedEndToken) {
        endBlock = newLine === -1 ? value.length : newLine;
        completeBlock = true;
      }

      index = newLine;
      firstRun = false;
    } while (!completeBlock && newLine !== -1);

    if (!completeBlock) return;
    var block = value.substring(startBlock, endBlock);
    var blockContent = block.substring(block.indexOf(C_NEWLINE), block.lastIndexOf(C_NEWLINE)).trim();
    var summary = block.slice(options.token.length, block.indexOf(C_NEWLINE)).trim();
    var start = eat.now();
    var add = eat(block);
    var end = eat.now();
    var children = [];
    var childrenBlockContent = this.tokenizeBlock(blockContent, start);

    if (summary !== '') {
      children.push({
        type: 'summary',
        data: {
          hName: 'summary'
        },
        children: [{
          type: 'text',
          value: summary
        }]
      });
    }

    children = [...children, ...childrenBlockContent];
    return add({
      type: 'spoiler',
      children: children,
      data: {
        hName: 'details'
      },
      position: {
        start,
        end
      }
    });
  }

  blockTokenizers.spoiler = tokenizeBlocks;
  blockMethods.splice(blockMethods.indexOf('blockquote') + 1, 0, 'spoiler');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,